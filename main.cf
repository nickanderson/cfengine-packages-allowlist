body file control
{
      namespace => "packages_allowlist";
}
bundle agent state
# @brief Manage software based on an allow list. When enforcement is enabled packages are automatically removed if they are installed and not in the allow list.
# @variable `packages_allowlist:state.enforcement` :: String variable that enables enforcement when it's value is `enabled`. Default: `disabled`
# @variable `packages_allowlist:state.allowed` :: List of packages that are allowed to be installed.
# @inventory `Packages installed not in allow list`
{
  vars:

      # The policy default tries to be safe, not automatically un-installing
      # packages if they are not in the allow list.

      "enforcement"
        string => "disabled",
        if => not( isvariable( enforcement ) ),
        comment => concat( "This variable defaults to false but can be ",
                           "overridden by augments by defining ",
                           "'packages_allowlist:state.enforcement'" );

      # "allowed" slist => { "emacs", "cfengine" };
      # Expected to be defined via Augments/Input 'packages_allowed:state.allowed'

      # We query CFEngine's cache of package info to get the data of packages
      # installed for the /default/ package manager.

      "d_packages_installed"
        data => packagesmatching(".*",
                                 ".*",
                                 ".*",
                                 "$(default:package_module_knowledge.platform_default)");

      # We get the index of the package installed data so that we can iterate.

      "i_packages_installed"
        slist => getindices( "d_packages_installed" );

      # We build an associative array of packages that should be removed since
      # they are installed but not in the allow list. We use this for inventory
      # and as a step in the process of getting a consolidated list.

      "remove[$(d_packages_installed[$(i_packages_installed)][name])]"
        string => "$(d_packages_installed[$(i_packages_installed)][name])",
        if => not( isvariable( "allowed" ) ),
        meta => { "inventory", "attribute_name=Packages installed not in allow list"},
        comment => "We inventory every package as not allowed if the list of allowed packages is not defined";

      "remove[$(d_packages_installed[$(i_packages_installed)][name])]"
        string => "$(d_packages_installed[$(i_packages_installed)][name])",
        if => none( concat("^", escape( "$(d_packages_installed[$(i_packages_installed)][name])" ), "$"), "allowed"),
        meta => { "inventory", "attribute_name=Packages installed not in allow list"},
        comment => "We inventory every package that is not found in the allowed list of packages when it is defined";

      "remove_packages_named"
        slist => getindices( remove ),
        comment => concat( "This is the consolidated list of packages that ",
                           "are installed but not in the allow list and thus ",
                           "should be removed." );

  classes:

      # If the allow_list_enforcement_enabled variable is 'enabled' (case insensitive
      # then we define the class for enforce allow list)

      "allow_list_enforcement_enabled"
        expression => regcmp( "^(?i)enabled$", "$($(this.namespace):$(this.bundle).enforcement)" );

  packages:

      # We iterate over the packages installed, promising each package is absent

    allow_list_enforcement_enabled::
      "$(remove_packages_named)"
        policy => "absent",
        action => default:policy( "fix" ),
        if => isgreaterthan( length( allowed ), 0 ); # Avoid enforcing unless the allow list > non-zero

    !allow_list_enforcement_enabled::
      "$(remove_packages_named)"
        policy => "absent",
        action => default:policy( "warn" ), # Results in promise not kept and loud warnings
        if => isgreaterthan( length( allowed ), 0 ); # Avoid enforcing unless the allow list > non-zero

  reports:

    inform_mode::
      "packages-allowlist enforcement is not enabled (currently '$(enforcement)') set '$(this.namespace):$(this.bundle).enforcement' to 'enabled' to start enforcing."
        unless => "allow_list_enforcement_enabled";

      "packages-allowlist enforcement is enabled but the list of allowed packages is not defined."
        if => and( "allow_list_enforcement_enabled",
                   not( isvariable( allowed ) ) );

      "packages-allowlist enforcement is enabled but the list of allowed packages is empty."
        if => and( "allow_list_enforcement_enabled",
                   not( isgreaterthan( length( allowed ), 0 ) ) );

      "packages-allowlist enforcement is enabled but the list of allowed packages is worringly small ($(with))."
        if => and( "allow_list_enforcement_enabled",
                   not( isgreaterthan( length( allowed ), 5 ) ) ),
        with => length( allowed );
}
